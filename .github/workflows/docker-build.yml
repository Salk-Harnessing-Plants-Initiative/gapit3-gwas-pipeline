name: Build and Push Docker Image

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
    paths:
      - 'Dockerfile'
      - 'scripts/**'
      - 'config/**'
      - '.github/workflows/docker-build.yml'
  pull_request:
    branches:
      - '**'  # All branches
    paths:
      - 'Dockerfile'
      - 'scripts/**'
      - 'config/**'
      - '.github/workflows/docker-build.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to build for'
        required: true
        type: choice
        options:
          - test
          - prod
        default: 'test'
      version:
        description: 'Version tag for production (e.g., 1.0.0). Required for prod builds.'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.set-tag.outputs.tag }}
      is-prod: ${{ steps.determine-env.outputs.is-prod }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Determine build environment
        id: determine-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENV="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.event_name }}" == "push" ]] && [[ "${{ github.ref }}" =~ ^refs/tags/v ]]; then
            ENV="prod"
          else
            ENV="test"
          fi

          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "is-prod=$([[ $ENV == 'prod' ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

          echo "::notice::Building for environment: $ENV"

      - name: Validate production build
        if: steps.determine-env.outputs.is-prod == 'true'
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] && [[ -z "${{ github.event.inputs.version }}" ]]; then
            echo "::error::Production builds via workflow_dispatch require a version input"
            exit 1
          fi
          echo "::notice::Production build validated"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
            suffix=${{ steps.determine-env.outputs.is-prod == 'false' && '-test' || '' }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=sha-
            type=raw,value=latest,enable=${{ steps.determine-env.outputs.is-prod == 'true' && github.ref == 'refs/heads/main' }}
            type=raw,value=${{ github.event.inputs.version }},enable=${{ github.event_name == 'workflow_dispatch' && steps.determine-env.outputs.is-prod == 'true' }}

      - name: Set image tag output
        id: set-tag
        run: |
          # Extract the first tag for verification step
          TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -n1)
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "::notice::Primary image tag: $TAG"

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          load: ${{ github.event_name == 'pull_request' }}

      - name: Display build summary
        run: |
          echo "### Docker Build Summary :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ steps.determine-env.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image Tags:**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "**Pushed:** ${{ github.event_name != 'pull_request' }}" >> $GITHUB_STEP_SUMMARY

  verify-image:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: always() && needs.build-and-push.result == 'success'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine image to test
        id: image-ref
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For PRs, we need to build locally since image wasn't pushed
            echo "needs-build=true" >> $GITHUB_OUTPUT
            echo "image-tag=gapit3-test" >> $GITHUB_OUTPUT
          else
            echo "needs-build=false" >> $GITHUB_OUTPUT
            echo "image-tag=${{ needs.build-and-push.outputs.image-tag }}" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx (for PR builds)
        if: steps.image-ref.outputs.needs-build == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build image locally (PR only)
        if: steps.image-ref.outputs.needs-build == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          load: true
          tags: ${{ steps.image-ref.outputs.image-tag }}
          cache-from: type=gha

      - name: Test R installation
        run: |
          echo "::group::Testing R installation"
          docker run --rm --entrypoint R ${{ steps.image-ref.outputs.image-tag }} --version
          echo "::endgroup::"

      - name: Test GAPIT3 package
        run: |
          echo "::group::Testing GAPIT3 load and version"
          docker run --rm --entrypoint R ${{ steps.image-ref.outputs.image-tag }} \
            -e "library(GAPIT); cat('GAPIT version:', as.character(packageVersion('GAPIT')), '\n')"
          echo "::endgroup::"

      - name: Test required R packages
        run: |
          echo "::group::Testing required R packages"
          docker run --rm --entrypoint R ${{ steps.image-ref.outputs.image-tag }} \
            -e "
            packages <- c('data.table', 'dplyr', 'tidyr', 'ggplot2', 'readr', 'matrixStats', 'gridExtra', 'optparse', 'yaml', 'jsonlite')
            missing <- packages[!sapply(packages, requireNamespace, quietly = TRUE)]
            if (length(missing) > 0) {
              cat('Missing packages:', paste(missing, collapse=', '), '\n')
              quit(status=1)
            }
            cat('All required packages are installed!\n')
            "
          echo "::endgroup::"

      - name: Test entrypoint script
        run: |
          echo "::group::Testing entrypoint help"
          docker run --rm ${{ steps.image-ref.outputs.image-tag }} --help
          echo "::endgroup::"

      - name: Test validation script
        run: |
          echo "::group::Testing validation script (expected to fail without data)"
          # This will fail because data files don't exist, but script should run
          docker run --rm ${{ steps.image-ref.outputs.image-tag }} validate || true
          echo "::endgroup::"

      - name: Verification summary
        run: |
          echo "### Image Verification :white_check_mark:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ steps.image-ref.outputs.image-tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tests Passed:**" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ R installation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ GAPIT3 package" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Required R packages" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Entrypoint script" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Validation script" >> $GITHUB_STEP_SUMMARY
